TEC-1 Hardware Memory Map

The TEC-1's hardware memory map is created by the 74ls138 that is attached to address lines A11, A12 and A13

Because of this, the address decoder decodes 2k blocks. This was chosen because the 2716 & 6116 chips (both 2k in size) were common at the time of the design.

0000h-07ffh	-	2k MONitor ROM
0800h-0fffh -	2k RAM
1000h-17ffh -	RAM Exansion Port
1800h-1fffh	-	uncommitted
2000h-27ffh -	uncommitted	
2800h-2fffh -	uncommitted
3000h-37ffh	-	uncommitted
3800h-3fffh -	uncommitted

Any uncommitted 2k block can be put to any purpose e.g. RAM Stack, NVRAM, E(E)PROM, TEC EPROM burner, etc.

Because A14 and A15 are not decoded, Address 4000h, 8000h, C000h 'wrap around' to 0000h, therefore any program accessing Addresses above 4000h risk overwriting memory by accident.
To prevent this, address lines A14 and A15 need to be added to the 74ls138.

Connecting A14 to pin 5 of the 74ls138 will expand the address 'wrap around' range to 8000h. Connecting A15 via an inverter to pin 6 of the 74ls138 will fully decode the full 64k and prevent any wrap-around.
(disconnect pins 5 and 6 from ground/power, obviously).



To support larger size chips e.g. 8k 6264 RAM & 27c64 EPROM, simply pick higher address lines to decode. For example, to support the 8k chips (and to decode 8k blocks instead of 2k) - simply swap A11/12/13 for A13/14/15 instead.
i.e. A13 to pin 1, A14 to pin 2 and A15 to pin 3. This automatically eliminates the 'wrap around' problem also!! This is the approach taken by the SC-1 and is a logical progression to support the newer,larger chips.
Any more modern TEC 'redesign' would be logical to move to 8k (or even higher size block) addressing.
In an extreme case, a 32k ROM + 32k RAM design can eliminate the 74ls138 entirely, and simply use A15 as the 'chip select' signal - as-is for ROM and inverted, for RAM.

The problem with not decoding 2k blocks is, since all the MONitors look for 2k of RAM at 0800h, the monitor will need to be modifed so that variables, stack etc. are placed where the RAM actually is - i.e. from 2000h upwards.
The TEC MONitors were generally written by hand and are full of hard coded addresses, meaning any such project would be a major undertaking. Check the tEC github - someone may have done it :)




Generally, any Z80 CPU hardware design needs ROM placed at 0000h since the power-on program counter address is 0000h - so the first CPU instruction is always fetched from 0000h. If you have RAM or "nothing" at this address,
you can't guarantee what instruction the CPU will execute first. Also, the NMI, INT and restart vectors all point to addresses within the first 100h bytes (e.g. NMI at 00066h).
In the TECs case, there needs to be the keyboard handler at 0066h (NMI vector).


Over the years there have been many clever designs to allow some form of 'bank switching' to enable the Z80 to see a full 64k of RAM - in the case of the TEC it is unlikely that such a feature would ever be needed (640k ought to be enough, anyone?) 
and so we will leave such advanced ideas for others to explore.




Useful MONitor Memory Addreses

The various MONitors offer interesting items at various memory addresses. A brief list follows:



MON-1 ROM Routines

See issue 10 for documnetation on the following ROM routines.

018Eh	- Beep Routine. Makes a beep sound.
01B0h 	- Music Routine. Plays a musical note sequence based on data stored at 0800h.
0270h	- Display routine. Scrolls a series of letters across the 7-seg displays from right to left based on data stoed at 0800h.
0320h	- Invaders game
03E0h 	- NIM game
0490h	- Luna Lander game

MON-1A additions:

05B0h	- sequencer routine. See Issue 11, page 29.


MON-1 RAM locations

User RAM start	0800h
Stack Pointer	0


MON2

User RAM start	0900h
Stack Pointer	0


JMON

User RAM start	0900h
Stack Pointer	0


